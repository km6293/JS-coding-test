// let [n, ...input] = require('fs').readFileSync("/dev/stdin").toString().trim().split("\n");
// let [n, ...input] = require('fs').readFileSync(__dirname + "/../input.txt").toString().trim().split("\n");
// let [column, row] = n.split(' ').map(Number); 
// input = input.map(e => e.split(' ').map(Number));

class Heap {
    constructor() {
      this.heap = [null];
    }
  
    swap(a, b) {
      [this.heap[a], this.heap[b]] = [this.heap[b], this.heap[a]];
    }
  
    size() {
      return this.heap.length - 1;
    }
  
    empty() {
      return this.size() === 0;
    }
  
    add(value) {
      this.heap.push(value);
      let cur = this.heap.length - 1;
      let par = Math.floor(cur / 2);
  
      while (par > 0 && this.heap[par] > value) {
        this.swap(cur, par);
        cur = par;
        par = Math.floor(cur / 2);
      }
    }
  
    poll() {
      if (this.empty()) {
        return 0;
      }
      if (this.size() === 1) {
        return this.heap.pop();
      }
      let returnValue = this.heap[1];
      this.heap[1] = this.heap.pop();
  
      let cur = 1;
      let left = 2;
      let right = 3;
  
      while (this.heap[cur] > this.heap[left] || this.heap[cur] > this.heap[right]) {
        if (this.heap[left] > this.heap[right]) {
          this.swap(cur, right);
          cur = right;
        } else {
          this.swap(cur, left);
          cur = left;
        }
        left = cur * 2;
        right = cur * 2 + 1;
      }
  
      return returnValue;
    }

    peek() {
        return this.heap[1];
    }
}

let [n, ...input] = require('fs').readFileSync(__dirname + "/../input.txt").toString().trim().split("\n");
input = input.map(cur => cur.trim().split(" ").map(num => Number(num))).sort(function(a,b){
    if(a[0] > b[0]) return 1;
    else return -1;
})

let solve = () => {
    let pq = new Heap();
    let max = 0;

    input.forEach(cur => {
        if(pq.empty()){
            pq.add(cur[1]);
        }else{
            if(pq.peek() > cur[0]){
                pq.add(cur[1])
            }
            else{
                pq.poll();
                pq.add(cur[1]);
            }
        }
        if(max < pq.size()) max = pq.size();
    });
    console.log(max);
};

solve();